{"version":3,"sources":["components/ViewUser.js","Api/Users.js","components/UsersForm.js","App.js","reportWebVitals.js","index.js"],"names":["props","style","listStyle","user","name","email","getUsers","a","axios","get","response","console","log","error","deleteUser","id","url","delete","addUser","values","post","UsersForm","schema","Yup","shape","required","enableReinitialize","initialValues","onSubmit","validationSchema","render","className","htmlFor","App","state","users","componentDidMount","then","setState","data","setActive","the_deleteUser","index","indexOf","splice","catch","alert","the_updateUser","the_addUser","this","map","username","phone","website","company","onClick","ViewUser","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d52c0d53.chunk.js","sourcesContent":["export default function (props){\n    return(\n        <ul style={{listStyle:'none'}}>\n            <span>name</span><li>{props.user.name}</li>\n            <span>email</span><li>{props.user.email}</li>\n        </ul>\n    )\n}","import axios from \"axios\";\n\n// get users\nexport async function getUsers(){\n    const url = 'https://jsonplaceholder.typicode.com/users/';\n    try {\n        const response = await axios.get(url);\n        console.log(response);\n        return response;\n    }catch (error){\n        console.error(error);\n    }\n}\n\n// delete user\nexport async function deleteUser(id){\n    const url = 'https://jsonplaceholder.typicode.com/users/'+id;\n    try {\n        const response = await axios.delete(url);\n        console.log(response);\n        return response;\n    }catch (error){\n        console.error(error);\n    }\n}\n\n// update user\nexport async function updateUser(id,values){\n    const url = 'https://jsonplaceholder.typicode.com/users/'+id;\n    try {\n        const response = await axios.put(url,values);\n        console.log(response);\n        return response;\n    }catch (error){\n        console.error(error);\n    }\n}\n\n// add new user\nexport async function addUser(values){\n    const url = 'https://jsonplaceholder.typicode.com/users/';\n    try {\n        const response = await axios.post(url,values);\n        console.log(response);\n        return response;\n    }catch (error){\n        console.error(error);\n    }\n}\n\n\n","import React from 'react';\nimport  {Formik , Form , Field , ErrorMessage} from 'formik';\nimport * as Yup from 'yup';\n\nexport default function UsersForm(props){\n    // validation schema Yup\n    const schema = Yup.object().shape({\n        name:Yup.string().required('the name is required'),\n        email:Yup.string().email().required('the email is required'),\n    });\n\n    return (\n        <Formik\n          enableReinitialize={true}\n          initialValues={props.values}\n          onSubmit={props.onSubmit}\n          validationSchema={schema}\n          render={props=>{\n              return (\n                  <div className={\"card\"}>\n                      <div className=\"card-header\">\n                          <h2 className=\"card-title\">Register New User</h2>\n                      </div>\n                      <div className=\"card-body\">\n                          <Form>\n                              <div className={\"form-group\"}>\n                                  <label htmlFor=\"name\">Name</label>\n                                  <Field name={\"name\"} className={\"form-control\"}/>\n                                    <ErrorMessage className={\"alert alert-danger\"} name={\"name\"}/>\n                              </div>\n\n                              <div className={\"form-group\"}>\n                                  <label htmlFor=\"email\">Email</label>\n                                  <Field name={\"email\"} className={\"form-control\"}/>\n                                    <ErrorMessage name={\"email\"}/>\n                              </div>\n\n                              <div className={\"form-group\"}>\n                                  <button className={\"btn btn-success btn-sm\"}>Save User</button>\n                              </div>\n\n                          </Form>\n                      </div>\n                  </div>\n              )\n          }}\n        />\n    );\n\n\n}","import React ,{ Component} from 'react';\nimport css from './App.css';\nimport ViewUser from \"./components/ViewUser\";\nimport {getUsers, deleteUser, updateUser, addUser} from './Api/Users'\nimport UsersForm from \"./components/UsersForm\";\n\n\n\nclass App extends Component{\n\n    state = {\n        users : [],\n        user: {}\n    }\n\n    componentDidMount =  () => {\n         getUsers().then(response=>{\n          this.setState({\n              users : response.data\n          })\n         });\n    }\n\n    setActive = (user) =>{\n        this.setState({\n            user:user\n        })\n    }\n\n    // methode to delete user ********************************************\n    the_deleteUser = (user) => {\n        // delete user from server\n        deleteUser(user.id)\n            .then(()=>{\n                // delete user\n                console.log('deleted')\n                let users = this.state.users;\n                const index = users.indexOf(user);\n                users.splice(index,1);\n                this.setState({users:users});\n            })\n            .catch(error=>{\n               alert('Oops error server '+error)\n            }).catch(error=>{\n                alert('Oops problem of server');\n        });\n\n    }\n    //**********************************************************************\n\n    // methode to update user **********************************************\n    the_updateUser = (values) => {\n       addUser(values)\n           .then(() =>{\n               alert('the user updated with success');\n           }).catch(error=>{\n           alert('Oops problem of server');\n       });\n    }\n    //**********************************************************************\n\n    // methode to add user **********************************************\n    the_addUser = (values) => {\n        addUser(values)\n            .then(() =>{\n                alert('the user adding with success');\n            }).catch(error=>{\n            alert('Oops problem of server');\n        });\n    }\n    //**********************************************************************\n\n    render() {\n\n        return (\n            <div className=\"App\">\n                <div className={\"container my-5\"}>\n                    <div className={'row'}>\n                        <div className={'col-md-12'}>\n                            <div className={'card my-3'}>\n                                <div className={'card-body'}>\n                                    <h1 className={'card-header text-success'}>Users api </h1>\n\n                                    <div className=\"col-md-12\">\n                                        <h4 className={\"text-primary\"}>Add User</h4>\n                                            <UsersForm\n                                                values={{\n                                                    name: '',\n                                                    email: '',\n                                                }}\n                                                onSubmit={this.the_addUser}\n                                            />\n\n                                    </div>\n\n                                </div>\n\n                                <div className={'card-body'}>\n                                <table className={\"table table-bordered table-hover text-align-center\"}>\n                                    <thead>\n                                        <tr className='bg-primary'>\n                                            <th>ID</th>\n                                            <th>Name</th>\n                                            <th>Username</th>\n                                            {/*<th>Email</th>*/}\n                                            {/*<th>Address</th>*/}\n                                            <th>Phone</th>\n                                            <th>Website</th>\n                                            <th>Company</th>\n                                            <th>Status</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n\n                                    {\n                                         this.state.users.map((user,index) => {\n                                         return (\n                                        <tr key={user.id}>\n                                        <td>{user.id}</td>\n                                        <td>{user.name}</td>\n                                        <td>{user.username}</td>\n                                        {/*<td>{user.email}</td>*/}\n                                        {/*<td>{`${user.address.street}, ${user.address.city}`}</td>*/}\n                                        <td>{user.phone}</td>\n                                        <td>{user.website}</td>\n                                        <td>{user.company.name}</td>\n\n                                        <td>\n                                            <div className={'row'}>\n                                              <span onClick={()=>this.setActive(user)} className={'btn btn-primary btn-sm'}><i className={'fa fa-eye'}></i>Show</span>\n                                              <span  className={'btn btn-success btn-sm'}><i className={'fa fa-edit'}></i>Edit</span>\n                                              <span onClick={()=>this.the_deleteUser(user)} className={'btn btn-danger btn-sm'}><i className={'fa fa-trash'}></i>Delete</span>\n                                            </div>\n                                        </td>\n                                        </tr>\n                                        )\n                                    })\n                                    }\n\n                                    </tbody>\n                                </table>\n                            </div>\n\n                            <div className={'card-footer'}>\n                                {this.state.user.id > 0 ?\n                                 <ViewUser user={this.state.user}/>\n                                 :\n                                    'Please Select user'\n                                }\n                            </div>\n\n\n                                <div className=\"col-md-12\">\n                                    <h4 className={\"text-warning\"}>Edit User</h4>\n                                    {this.state.user.id > 0 ?\n                                    <UsersForm\n                                      values={this.state.user}\n                                      onSubmit={this.the_updateUser}\n                                    />\n                                    :\n                                    'Please Select user'\n                                    }\n                                </div>\n\n                            </div>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}